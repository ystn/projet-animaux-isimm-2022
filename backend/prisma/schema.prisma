// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite3"
}


model User {
  id           Int           @id @default(autoincrement())
  name         String
  username     String        @unique
  email        String        @unique
  password     String
  active       Boolean       @default(true)
  blocked      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userGroups   UserGroup[]
  commentables Commentable[]
  reports      Report[]
  feedbacks    Feedback[]
}

model Tag {
  id        Int           @id @default(autoincrement())
  nom       String
  taggables TagTaggable[]
}

model Taggable {
  id     Int           @id @default(autoincrement())
  tags   TagTaggable[]
  group  Group?
  posts  Post?
  medias Media?
}

model TagTaggable {
  id         Int      @id @default(autoincrement())
  taggable   Taggable @relation(fields: [taggableId], references: [id])
  taggableId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
}

model Group {
  taggable    Taggable    @relation(fields: [id], references: [id])
  id          Int         @unique
  url         String      @unique
  nom         String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userGroups  UserGroup[]
  posts       Post[]
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  // role      UserRole @default(MEMBER)
  role      String @default("MEMBER")
  blocked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commentable {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @default(1)
  post      Post?
  comment   Comment?   @relation("comment_parent")
  comments  Comment[]  @relation("comment_commentedTo")
  feedbacks Feedback[]
}

model Post {
  commentable Commentable @relation(fields: [id], references: [id])
  id          Int         @unique
  taggable    Taggable    @relation(fields: [taggableId], references: [id])
  taggableId  Int         @unique
  titre       String
  corps       String
  published   Boolean     @default(true)

  group   Group    @relation(fields: [groupId], references: [id])
  groupId Int
  reports Report[]
}

model Comment {
  commentable   Commentable @relation("comment_parent", fields: [id], references: [id])
  id            Int         @unique
  corps         String
  commentedTo   Commentable @relation("comment_commentedTo", fields: [commentedToId], references: [id])
  commentedToId Int
}

model Feedback {
  id            Int          @id @default(autoincrement())
  // feedbackType  FeedbackType
  feedbackType  String
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  commentable   Commentable  @relation(fields: [commentableId], references: [id])
  commentableId Int
}

model Report {
  id          Int      @id @default(autoincrement())
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
  createdAt   DateTime @default(now())
}

model Media {
  taggable  Taggable  @relation(fields: [id], references: [id])
  id        Int       @unique
  order     Int
  path      String
  // type      MediaType
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// enum UserRole {
//   ADMIN
//   MEMBER
// }

// enum FeedbackType {
//   LIKE
// }

// enum MediaType {
//   PHOTO
//   VIDEO
//   AUDIO
// }
