// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  username     String        @unique
  email        String        @unique
  password     String
  active       Boolean       @default(true)
  blocked      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  commentables Commentable[]
  reports      Report[]
  feedbacks    Feedback[]
  creditCard CreditCard?

  followers Follow[] @relation("user_follower")
  follows Follow[] @relation("user_follow")
}

model CreditCard {
  id Int @id
  number       String        @unique
  exp          DateTime
  cvv          String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user User @relation(fields: [id], references: [id])
  
}

model Follow {
  followerId Int
  followId Int
  follower User @relation("user_follower", fields: [followerId], references: [id])
  follow User @relation("user_follow", fields: [followId], references: [id])
  @@id(fields: [followerId, followId])
}

model Tag {
  id        Int           @id @default(autoincrement())
  nom       String
  taggables TagTaggable[]
}

model Taggable {
  id     Int           @id @default(autoincrement())
  tags   TagTaggable[]
  posts  Post?
  medias Media?
}

model TagTaggable {
  id         Int      @id @default(autoincrement())
  taggable   Taggable @relation(fields: [taggableId], references: [id])
  taggableId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
}

model Commentable {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @default(1)
  post      Post?
  comment   Comment?   @relation("comment_parent")
  comments  Comment[]  @relation("comment_commentedTo")
  feedbacks Feedback[]
}

model Post {
  commentable Commentable @relation(fields: [id], references: [id])
  id          Int         @unique
  taggable    Taggable    @relation(fields: [taggableId], references: [id])
  taggableId  Int         @unique
  titre       String
  corps       String
  published   Boolean     @default(true)
  donatable   Boolean     @default(false)
  amount Int @default(0)

  reports Report[]
}

model Comment {
  commentable   Commentable @relation("comment_parent", fields: [id], references: [id])
  id            Int         @unique
  corps         String
  commentedTo   Commentable @relation("comment_commentedTo", fields: [commentedToId], references: [id])
  commentedToId Int
}

model Feedback {
  id            Int          @id @default(autoincrement())
  feedbackType  FeedbackType
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  commentable   Commentable  @relation(fields: [commentableId], references: [id])
  commentableId Int
}

model Report {
  id Int @id @default(autoincrement())
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
  createdAt   DateTime @default(now())

  @@unique(fields: [userId, postId])
}

model Media {
  taggable  Taggable  @relation(fields: [id], references: [id])
  id        Int       @unique
  order     Int
  path      String
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum FeedbackType {
  LIKE
}

enum MediaType {
  PHOTO
  VIDEO
  AUDIO
}
